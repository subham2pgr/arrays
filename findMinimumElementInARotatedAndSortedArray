/*
We can do this using Binary search
1. Find the mid element ie, mid = (low+high)/2

2. If the (mid+1)th element is less than mid element then return (mid+1)th element

3. If the mid element is less than (mid-1)th element then return the mis element

4. If the last element is greater than mid element then search in left half

5. If the last element is less than mid element then search in right half
*/
#include <iostream>

using namespace std;
int findMinimum(int arr[],int low,int high)
{
    int mid=(low+high)/2;
    if(arr[high]>arr[low])
    return arr[0];  //if there is no array rotation
    
    if(high==low)
    return arr[low]; //if there is only one element
    
    //if the element (mid + 1) is the minimum
	if (mid< high && arr[mid+1] <arr[mid])
    if(mid<high && arr[mid+1]<arr[mid])
    return arr[mid+1];
    
    //If the mid element is the minimum
    if(mid>low && arr[mid]<arr[mid-1])
    return arr[mid];
    
    //search in the left half
    if(arr[high]>arr[mid])
       return findMinimum(arr,low,mid-1);
     //search in the right half  
    else
       return findMinimum(arr,mid+1,high);
}
int main()
{
    int arr[]={5,6,7,1,2,3,4};
    int n=sizeof(arr)/sizeof(arr[0]);
    cout<<"The minimum element is\t"<<findMinimum(arr,0,n-1);
    return 0;
}
