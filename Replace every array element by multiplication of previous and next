

/*Replace every array element by multiplication of previous and next

An efficient solution can solve the problem in O(n) time and O(1) space. The idea is to keep track of previous element in loop.



#include <iostream>

using namespace std;



void modify(int arr[],int n)
{ 
    int curr,prev;
    // Nothing to do when array size is 1 
    if(n<=1)
     return;
     // store current value of arr[0] and update it 
    prev=arr[0]; 
   arr[0]=arr[0]*arr[1];
   
   for(int i=1;i<n-1;i++)
   {
       // Store current value of next interation 
       curr=arr[i];
       	// Update current value using previos value
       arr[i]=prev*arr[i+1];
       // Update previous value
       prev=curr;
   }
   // Update last array element
   arr[n-1]=prev*arr[n-1];
   
}
void printArray(int arr[],int n)
{
    for(int i=0;i<n;i++)
     cout<<arr[i]<<"\t";
}

int main()
{
    int arr[] = { 2,3,4,5,6 };  
    int n = sizeof(arr)/sizeof(arr[0]); 
    modify(arr,n);
    printArray(arr,n);
    return 0;
}
