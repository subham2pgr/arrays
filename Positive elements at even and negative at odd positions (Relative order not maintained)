/*
You have been given an array and you have to make a program to convert that array such that positive elements occur at even numbered places in the array and negative elements occur at odd numbered places in the array. 
We have to do it in place.



We take two pointers positive and negative. We set the positive pointer at start of the array and the negative pointer at 1st position of the array.
We move positive pointer two steps forward till it finds a negative element. Similarly we move negative pointer forward by two places till it finds a positive value at its position.
If the positive and negative pointers are in the array then we will swap the values at these indexes otherwise we will stop executing the process.
*/

#include <iostream>

using namespace std;

void swap(int *a,int *b)
{
    int temp=*a;
    *a=*b;
    *b=temp;
}

void rearrange(int arr[],int n)
{ 
    int positive=0,negative=1;
    while(true)
    {
        /* Move forward the positive pointer till  
         negative number number not encountered */
        while(positive<n && arr[positive]>=0)
        positive+=2;
        
        /* Move forward the negative pointer till  
         positive number number not encountered   */
        while(negative<n && arr[negative]<0)
        negative+=2;
        
        // Swap array elements to fix their position.
        if(positive<n && negative<n)
        swap(arr[positive],arr[negative]);
        
        /* Break from the while loop when any index  
            exceeds the size of the array */
        else
         break;
    }
   
}
void printArray(int arr[],int n)
{
    for(int i=0;i<n;i++)
     cout<<arr[i]<<"\t";
}

int main()
{
    int arr[] = { 1, -3, 5, 6, -3, 6, 7, -4, 9, 10 };  
    int n = sizeof(arr)/sizeof(arr[0]); 
    rearrange(arr,n);
    printArray(arr,n);
    return 0;
}
