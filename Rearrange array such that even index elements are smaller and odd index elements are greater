/*Rearrange array such that even index elements are smaller and odd index elements are greater
Given an array, rearrange the array such that :

If index i is even, arr[i] <= arr[i+1]
If index i is odd, arr[i] >= arr[i+1]

Examples:

Input  : arr[] = {2, 3, 4, 5} 
Output : arr[] = {2, 4, 3, 5}
Explanation : Elements at even indexes are
smaller and elements at odd indexes are greater
than their next elements

Note : Another valid answer
is arr[] = {3, 4, 2, 5}

Input  :arr[] = {6, 4, 2, 1, 8, 3}
Output :arr[] = {4, 6, 1, 8, 2, 3}

An efficient solution is to iterate over the array and swap the elements as per the given condition.
If we have an array of length n, then we iterate from index 0 to n-2 and check the given condition.
At any point of time if i is even and arr[i] > arr[i+1], then we swap arr[i] and arr[i+1]. Similarly, if i is odd and
arr[i] < arr[i+1], then we swap arr[i] and arr[i+1].

For the given example:
Before rearrange, arr[] = {2, 3, 4, 5}
Start iterating over the array till index 2 (as n = 4)

First Step:
At i = 0, arr[i] = 2 and arr[i+1] = 3. As i is even and arr[i] < arr[i+1], don't need to swap.
Second step:
At i = 1, arr[i] = 3 and arr[i+1] = 4. As i is odd and arr[i] < arr[i+1], swap them.
Now arr[] = {2, 4, 3, 5}
Third step:
At i = 2, arr[i] = 3 and arr[i+1] = 5. So, donâ€™t need to swap them

After rearrange, arr[] = {2, 4, 3, 5}
*/
#include <iostream>

using namespace std;
void swap(int *a,int *b)
{
    int temp=*a;
    *a=*b;
    *b=temp;
    
}
void rearrange(int arr[],int n)
{
    for(int i=0;i<n-1;i++)
    {
        if(i%2==0 & arr[i]>arr[i+1])
          swap(arr[i],arr[i+1]);
          
         if(i%2!=0 && arr[i]<arr[i+1])
           swap(arr[i],arr[i+1]);
    }
}
void printArray(int arr[],int n)
{
    for(int i=0;i<=n-1;i++)
     cout<<arr[i]<<"\t";
}
int main()
{
    int arr[] = { 6, 4, 2, 1, 8, 3 }; 
    int n = sizeof(arr) / sizeof(arr[0]); 
  
    cout << "Before rearranging: \n"; 
    printArray(arr, n); 
  
    rearrange(arr, n); 
  
    cout << "After rearranging: \n"; 
    printArray(arr, n); 
  
    return 0; 
}


